# Variables that define the AB boot process
BOOT_DEV=1

BOOT_A_PART=5
BOOT_A_ROOT=/dev/mmcblk1p6

BOOT_B_PART=9
BOOT_B_ROOT=/dev/mmcblk1p10

BOOT_COUNT_LIMIT=3

boot_path=/
boot_ab_file=uEnvAB.txt

# Needed for android
otherargs=init=/init androidboot.selinux=permissive androidboot.hardware=zcu102 firmware_class.path=/system/etc/firmware clk_ignore_unused

# Insert add_mac_to_fdt command into sdboot command just before booting
sdboot=run rtc_fix; run mmcxload && mmc dev $sdbootdev && mmcinfo && load mmc $sdbootdev:$partid $fdt_addr $fdt_file && fdt addr $fdt_addr && fdt ivclean mb $iv_mb_ord && fdt ivclean bp $iv_bp_ord && fdt ivclean io $iv_io_ord && load mmc $sdbootdev:$partid $kernel_addr Image && run add_mac_to_fdt && booti $kernel_addr - $fdt_addr

#
# Convert SN to MAC addr
#
# This would be better done automatically at board init time when iv_mb/iv_io
# vars are set.  New vars named iv_{mb,io}_mac{01} could be set, for the two
# MAC addresses reserved per SN.
#
oui=00 21 68
symbols=A B C D E F G H J K L M N P Q R S T U V W X Y Z 2 3 4 5 6 7 8 9
create_symbol_map=\
        setenv i 0; \
        for s in $symbols; do \
                symbol$s=$i; \
                setexpr i $i + 1; \
        done
sn_to_mac=\
        run create_symbol_map; \
        setenv m 0; \
        for n in 1 2 3 4 5; do \
            setexpr snchar sub ".*,(.)(.)(.)(.)(.),.*" "\\\\$n" "$iv_mb"; \
            setenv map setenv snval \\$symbol$snchar; \
            run map; \
            setexpr m $m * 0x20; \
            setexpr m $m + $snval; \
        done; \
        setexpr m $m * 0x2; \
        setenv m 000000$m; \
        setexpr m sub ".*(..)(..)(..)$" "\\1 \\2 \\3"; \
        setenv mac "$oui $m"
add_mac_to_fdt=\
        run sn_to_mac; \
        fdt set /amba/NOT_iv_io_00110_NOT_iv_io_00093_NOT_iv_io_00073_ethernet mac-address "[ $mac ]"

#
# RTC must be set with valid time on first powerup.
#
# Valid time is Saturday 1/1/2000
#
# See also m41t62 datasheet section 3.11 Oscillator stop detection
#
rtc_fix=\
    setenv scratch_addr ${kernel_addr}; \
    setenv rtc_i2c_addr 68; \
    setenv rtc_sec_reg 01; \
    setenv rtc_min_reg 02; \
    setenv rtc_hrs_reg 03; \
    setenv rtc_dow_reg 04; \
    setenv rtc_dom_reg 05; \
    setenv rtc_mon_reg 06; \
    setenv rtc_yrs_reg 07; \
    setenv rtc_flags_reg 0f; \
    setenv rtc_flags_mask 04; \
    setenv rtc_st_reg 01; \
    setenv rtc_st_on 80; \
    setenv rtc_st_off 00; \
    mw.b ${scratch_addr} 0; \
    i2c read ${rtc_i2c_addr} ${rtc_flags_reg} 1 ${scratch_addr}; \
    setexpr.b rtc_of_masked *${scratch_addr} \\& ${rtc_flags_mask}; \
    if itest ${rtc_of_masked} > 0; then \
        echo "WARNING: RTC Oscillator failure, resetting flag and date/time"; \
        i2c mw ${rtc_i2c_addr} ${rtc_st_reg} ${rtc_st_on}; \
        i2c mw ${rtc_i2c_addr} ${rtc_st_reg} ${rtc_st_off}; \
        sleep 4; \
        i2c mw ${rtc_i2c_addr} ${rtc_flags_reg} 00; \
        i2c mw ${rtc_i2c_addr} ${rtc_sec_reg} 00; \
        i2c mw ${rtc_i2c_addr} ${rtc_min_reg} 00; \
        i2c mw ${rtc_i2c_addr} ${rtc_hrs_reg} 00; \
        i2c mw ${rtc_i2c_addr} ${rtc_dow_reg} 07; \
        i2c mw ${rtc_i2c_addr} ${rtc_dom_reg} 01; \
        i2c mw ${rtc_i2c_addr} ${rtc_mon_reg} 01; \
        i2c mw ${rtc_i2c_addr} ${rtc_yrs_reg} 00; \
    else \
        echo "INFO: RTC Oscillator running normally"; \
    fi

# Load and run the AB script
loadABscript_addr=0x3000000
ABscript=AB.img
loadABscript=load mmc $sdbootdev:$partid ${loadABscript_addr} ${ABscript}

# If AB script returns, we should try to do something else - here we will force a boot of container A
runABscript=run loadABscript; source ${loadABscript_addr}; setenv force_boot_container a; source ${loadABscript_addr}

# Called by the AB script
prepboot=setenv fdt_file iveia-helios-z8.dtb;run iv_helios_ivmmc;setenv sdbootdev ${iv_mmc}; run uenvboot; setenv iv_tty ttyPS0; run defargs;
defabargs=setenv abbootargs console=${iv_tty},115200n8 iv_mb=${iv_mb} iv_io=${iv_io} iv_bp=${iv_bp} iv_mmc=${iv_mmc} rw rootwait rootfstype=ext4 earlycon mem=2032M ${otherargs}
fdtcommand=echo "fdtcommand"; fdt addr $fdt_addr && fdt ivclean mb $iv_mb_ord && fdt ivclean bp $iv_bp_ord && fdt ivclean io $iv_io_ord && run add_mac_to_fdt && echo "done" 

# iVeia Boot process
setup=setenv iv_io_ord 00125; setenv iv_io 205-00125-01-A1,UNDEF,Bone_Island; setenv fdt_file iveia-helios-z8.dtb;setenv iv_mmc 1; mmc dev 0;if fatload mmc 0 ${fdt_addr} ${fdt_file}; then setenv iv_mmc 0; fi; mmc dev 1; setenv sdbootdev ${iv_mmc}; setenv iv_tty ttyPS0; 
memadj=echo "mem adjust"; mw ff180080 40; mw ff180084 40; mw ff0a0244 00002003; mw ff0a0248 00002003; mw ff0a0008 20032003; mw ff0a0044 00002003;
fpga_setup=run rst_fpga_active; fatload mmc $sdbootdev ${xloadaddr} ${xloadfile}; fpga loadb 0 ${xloadaddr} ${filesize}; run rst_fpga_inactive
defargs=run setup; run memadj; run fpga_setup; setenv modeboot runABscript
